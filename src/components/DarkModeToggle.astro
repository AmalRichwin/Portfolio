---
import MoonIcon from './icons/MoonIcon.astro';
import SunIcon from './icons/SunIcon.astro';
---

<mode-toggle class='flex'>
    <button class='justify-self-end ml-4 inline-flex items-center group' id='mode-toggle'
        ><span class='sr-only'>Toggle dark mode</span>
        <SunIcon
            size={16}
            className='text-slate-200 hover:text-white'
            id='change-theme'
            data-mode='light'
        />
        <MoonIcon size={16} className=' text-white' id='change-theme' data-mode='dark' />
    </button>
</mode-toggle>

<script>
    function updateHTMLTheme(mode: 'light' | 'dark') {
        const themeColorMetaTag = document.head.querySelector('meta[name="theme-color"]');

        if (mode === 'dark') {
            document.documentElement.classList.remove('light');
            document.documentElement.classList.add('dark');
            if (themeColorMetaTag) {
                // @ts-ignore
                themeColorMetaTag.content = '#262626';
            }
        } else {
            document.documentElement.classList.remove('dark');
            document.documentElement.classList.add('light');
            if (themeColorMetaTag) {
                // @ts-ignore
                themeColorMetaTag.content = '#ffffff';
            }
        }
    }
    function updateStorageTheme(mode: 'light' | 'dark') {
        if (mode === 'dark') {
            sessionStorage.setItem('theme', 'dark');
        } else {
            sessionStorage.setItem('theme', 'light');
        }
    }
    class ModeToggle extends HTMLElement {
        constructor() {
            super();
            let currentMode: 'light' | 'dark' = document.documentElement.classList.contains('dark')
                ? 'dark'
                : 'light';

            const toggle = this.querySelector('button');
            const iconElem = toggle?.querySelector('#change-theme');

            if (iconElem) {
                // set the toggle mode based on the html classname set in ThemeScript.astro
                if (currentMode === 'dark') {
                    iconElem.classList.remove('light');
                    iconElem.classList.add('dark');
                }

                // we load the toggle invisible to prevent flash
                // remove visibility class after setting initial dark/light class
                iconElem.classList.remove('invisible');

                // Each time the button is clicked, update the count.
                toggle?.addEventListener('click', () => {
                    if (currentMode === 'dark') {
                        const modeToSwitch = 'light';
                        iconElem.classList.remove('dark');
                        iconElem.classList.add(...['light', 'animate-spin']);
                        updateHTMLTheme(modeToSwitch);
                        updateStorageTheme(modeToSwitch);
                        currentMode = modeToSwitch;
                    } else {
                        const modeToSwitch = 'dark';
                        iconElem.classList.remove('light');
                        iconElem.classList.add('dark');
                        updateHTMLTheme(modeToSwitch);
                        updateStorageTheme(modeToSwitch);
                        currentMode = modeToSwitch;
                    }

                    // prevent slide animation on page load for dark mode
                    if (!iconElem.classList.contains('duration-300')) {
                        iconElem.classList.add('duration-300');
                    }
                });
            }
        }
    }

    customElements.define('mode-toggle', ModeToggle);
</script>

<style>
    .light {
        transform: translateX(0.25rem);
        background-color: rgb(var(--color-primary-yellow));
        -moz-transform: scale(1.05);
        -webkit-transform: scale(1.05);
        -o-transform: scale(1.05);
        -ms-transform: scale(1.05);
        -webkit-transform: scale(1.05);
        transform: scale(1.05);

        -webkit-transition: transform 1.05s ease-in-out;
        -moz-transition: transform 1.05s ease-in-out;
        -ms-transition: transform 1.05s ease-in-out;
    }
    .dark {
        transform: translateX(1.5rem);
        background-color: rgb(var(--color-primary-blue));
        -moz-transform: scale(1.05);
        -webkit-transform: scale(1.05);
        -o-transform: scale(1.05);
        -ms-transform: scale(1.05);
        -webkit-transform: scale(1.05);
        transform: scale(1.05);

        -webkit-transition: transform 1.05s ease-in-out;
        -moz-transition: transform 1.05s ease-in-out;
        -ms-transition: transform 1.05s ease-in-out;
    }
</style>
